{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAKaA,G,MAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBACAC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEH,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAMN,EAAMI,QAAQG,MAApB,YCLKC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC2CHG,G,wDA9Cb,aAAe,IAAD,8BACZ,gBAoBJH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAnBpC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,gEAUO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAYjC,MAE2BC,KAAKN,MAA/Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYc,wBAGlD,OACE,sBAAKhC,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAxCVK,IAAMC,YCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3a3fe9c4.chunk.js","sourcesContent":["//jshint esversion: 6\r\nimport React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img \r\n        alt=\"monster\" \r\n        src={`https://robohash.org/${props.monster.id}?set=set3&size=180x180`} \r\n        />\r\n        <h2> {props.monster.name} </h2>\r\n        <p> { props.monster.email } </p>\r\n    </div>\r\n);\r\n","//jshint esversion: 6\r\nimport React from \"react\";\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => (\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} /> \r\n        ))}\r\n    </div>\r\n);","//jshint esversion: 6\r\nimport React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange} \r\n\r\n    />\r\n);","//jshint esversion: 6\r\nimport React from 'react'; // Component gives you access to state\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport { SearchBox } from './components/search-box/search-box.component'\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor() { \r\n    super(); // <------- Super gives us access to the state method\r\n\r\n    this.state = {        \r\n      monsters: [],\r\n      searchField: ''\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({monsters: users}));\r\n  }\r\n\r\n// Inside of here is where we see the \"state\" being referenced twice\r\n// First,  inside of the paragraph to render the string\r\n// Then inside of the button using the onClick method to change what happens to the string once the \r\n// button is clicked.\r\n\r\nhandleChange = e => {\r\n  this.setState({ searchField: e.target.value });\r\n}\r\n\r\n  render() {\r\n// going to filter the monsters here\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonsters = monsters.filter(monster => \r\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\r\n      );\r\n// inside the cardList we give it the value of filtered monsters to show what weare searching\r\n    return (\r\n      <div className='App'>\r\n        <h1> Monsters Rolodex </h1>\r\n        <SearchBox \r\n          placeholder='search monsters'\r\n          handleChange={this.handleChange}\r\n        />\r\n        <CardList monsters={filteredMonsters} /> \r\n           \r\n      </div> \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}